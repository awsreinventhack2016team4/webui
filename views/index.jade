doctype html
html(lang='en')
  head
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    meta(name='description', content='Hackathon')
    meta(name='author', content='Team 4')
    
    title Hackathon

    // Bootstrap core CSS
    link(href='../bootstrap-3.3.6-dist/css/bootstrap.min.css', rel='stylesheet')

    // link(href='../includes/DataTables-1.10.12/css/dataTables.jqueryui.min.css', rel='stylesheet')
    link(href='../includes/DataTables-1.10.12/css/dataTables.bootstrap.min.css', rel='stylesheet')
    
    // Buttons support
    link(href='../includes/DataTables-1.10.12/css/buttons.bootstrap.min.css', rel='stylesheet')
    
    link(href='../includes/bootstrap-switch.min.css', rel='stylesheet')
 
    // Custom styles for this template
    //link(href='#{pathToSelectedTemplateWithinBootstrap}/jumbotron.css', rel='stylesheet')

    // Just for debugging purposes. Don't actually copy these 2 lines!
    //if lt IE 9
      script(src='../bootstrap/docs/assets/js/ie8-responsive-file-warning.js')
    script(src='/docs/assets/js/ie-emulation-modes-warning.js')

    // IE10 viewport hack for Surface/desktop Windows 8 bug
    script(src='/docs/assets/js/ie10-viewport-bug-workaround.js')
    // HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries
    //if lt IE 9
      script(src='https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js')
      script(src='https://oss.maxcdn.com/respond/1.4.2/respond.min.js')

    // Custom styles for this template

    link(href='../stylesheets/style.css', rel='stylesheet')
    link(href='../stylesheets/bootstrap-submenu-003.css', rel='stylesheet')
    link(href='../stylesheets/bootstrap-dtv-custom-014.css', rel='stylesheet')
    link(href='../stylesheets/openlayer.css', rel='stylesheet')
    link(href='../stylesheets/slider.css', rel='stylesheet')
    
    link(href='https://openlayers.org/en/v3.19.1/css/ol.css', type='text/css', rel='stylesheet')
    
      
  // NAVBAR
  // ==================================================
  body
    .navbar-wrapper
      .container
        .navbar.navbar-inverse.navbar-fixed-top(role='navigation')
          .container
            .navbar-header
              button.navbar-toggle(type='button', data-toggle='collapse', data-target='.navbar-collapse')
                span.sr-only Toggle navigation
                span.icon-bar
                span.icon-bar
                span.icon-bar
              a.dropdown.navbar-brand(href='#') 
                    | Giraffe

            .navbar-collapse.collapse
              ul.nav.navbar-nav


                // REALTIME TOOLS
                li.dropdown
                  a.dropdown-toggle(href='#', data-toggle='dropdown')
                    | <span class="glyphicon glyphicon-cloud" aria-hidden="true"></span>  Proactive Tools
                    span.caret

                  ul.dropdown-menu(role='menu')

                    li.dropdown-header TBD Header
                    li
                      a(href='tbd', target='_blank') TBD
                    li.dropdown-submenu(role='menu')
                      a(href='tbd', tabindex='-1', target='_blank') tbd
                      ul.dropdown-menu(role='menu')
                       li
                          a(href='tbd', target='_blank') TBD
                       li
                          a(href='tbd', target='_blank') TBD

                    li.divider
                    li.dropdown-header TBD Header
                    li
                      a(href='tbd', target='_blank') TBD

                // TRENDS
                li.dropdown
                  a.dropdown-toggle(href='#', data-toggle='dropdown')
                    | <span class="glyphicon glyphicon-cloud" aria-hidden="true"></span> Trends
                    span.caret
                  ul.dropdown-menu(role='menu')
                    li.dropdown-header Data Analysis

                    li
                      a(href='tbd', target='_blank') TBD
                    li
                      a(href='tbd', target='_blank') TBD

                // RECOMMENDATIONS
                li.dropdown
                  a.dropdown-toggle(href='#', data-toggle='dropdown')
                    | <span class="glyphicon glyphicon-cloud" aria-hidden="true"></span> Recommendations
                    span.caret
                  ul.dropdown-menu(role='menu')
                    li.dropdown-header TBD

                    li
                      a(href='tbd', target='_blank') TBD
                    li
                      a(href='tbd', target='_blank') TBD

                // ALERTS
                li.dropdown
                  a.dropdown-toggle(href='#', data-toggle='dropdown')
                    | <span class="glyphicon glyphicon-cloud" aria-hidden="true"></span> Alerts
                    span.caret
                  ul.dropdown-menu(role='menu')
                    li.dropdown-header TBD

                    li
                      a(href='tbd', target='_blank') TBD
                    li
                      a(href='tbd', target='_blank') TBD

  p.top-buffer

  .container.wide(id='tech' style='display:block;visibility:visible;')
   .row(id='tbd1')
     .col-md-10.col-md-10
       h2
         | Protected Areas: Impact Portal

  p.top-buffer

  .container.wide(id='mapcontainer' style='display:block;visibility:visible;')
  .row(id='map1')
    .col-md-3.col-md-3
      .thumbnail
        .caption
         h3
          | Observation Filters
         p
          input(type="checkbox" name="weapons" id="weapons" onclick="drawLayer();" checked)
          &nbsp; Weapons 
          img(src="../images/people.png") 
         p
          input(type="checkbox" name="wildlife" id="wildlife" onclick="drawLayer();" checked)
          &nbsp; Wildlife &nbsp; 
          img(src="../images/wildlife-inverted.png") 
          p
           input(type="checkbox" name="people" id="people" onclick="drawLayer();" checked)
           &nbsp; People Direct Observation 
           img(src="../images/people2.png") 
           
           
         h3
          | Patrol Filters
         p
          input(type="checkbox" name="logging" id="logging" onclick="drawLayer();")
          &nbsp; Illegal Logging  
          img(src="../images/logging-inverted.png") 
         p
          input(type="checkbox" name="elephant" id="elephant" onclick="drawLayer();")
          &nbsp; Elephant Carcasses  
          img(src="../images/elephant.png") 
         p
          input(type="checkbox" name="huntingCamps" id="huntingCamps" onclick="drawLayer();")
          &nbsp; Hunting Camps
          img(src="../images/huntingCamp.png") 
         p
          input(type="checkbox" name="snares" id="snares" onclick="drawLayer();")
          &nbsp; Snares
          img(src="../images/snares.png") 
           
          h3
           | Heat Zones
          p
           input(type="checkbox" name="zone1" id="zone1" onclick="drawLayer();")
           &nbsp; 1 km
          p
           input(type="checkbox" name="zone10" id="zone10" onclick="drawLayer();")
           &nbsp; 10 km
          p
           input(type="checkbox" name="zone100" id="zone100" onclick="drawLayer();")
           &nbsp; 100 km
             
          h3
           | Reporting Range
          p
          .well
            | 2000 &nbsp;
            input(type="text" data-slider-tooltip="hide" data-slider-min="2000" data-slider-max="2016" data-slider-step="1" data-slider-value="[2000,2016]" id="yearSlider").span2
            | &nbsp; 2016

           
    .col-md-9.col-md-9

      .map(id='map', tabindex='0')
      .btn(id="zoom-out") Zoom out
      .btn(id="zoom-in") Zoom in
           

  // Bootstrap core JavaScript
  // ==================================================
  
  // Added for OpenLayers
  script(src='https://cdn.polyfill.io/v2/polyfill.min.js?features=requestAnimationFrame,Element.prototype.classList,URL')
  script(src='https://openlayers.org/en/v3.19.1/build/ol.js')
  
  script(src='../includes/DataTables-1.10.12/js/jszip.min.js')
  script(src='../includes/DataTables-1.10.12/js/pdfmake.min.js')
  script(src='../includes/DataTables-1.10.12/js/vfs_fonts.js')
  script(src='../includes/jquery-1.11.1.min.js')
  script(src='../includes/jquery.dataTables.min.js')
  script(src='../bootstrap-3.3.6-dist/js/bootstrap.min.js')
  script(src='../includes/tooltip-viewport-dtv-001.js')
  script(src='../includes/DataTables-1.10.12/js/buttons.colVis.min.js')
  script(src='../includes/DataTables-1.10.12/js/buttons.html5.min.js')
  script(src='../includes/DataTables-1.10.12/js/buttons.print.min.js')
  script(src='../includes/DataTables-1.10.12/js/dataTables.buttons.min.js')
  script(src='../includes/DataTables-1.10.12/js/buttons.bootstrap.min.js')
  script(src='../includes/bootstrap-switch.min.js')
  script(src='../includes/liquidfillgauge.js')
  
  script(src='../includes/bootstrap-slider.js')
  script(src='../includes/d3.v3.min.js')
  
  script.
  
    var vectorLayer;
    var zoneLayer1;
    var zoneLayer10;
    var zoneLayer100;
    var map;
  
    $(document).ready(function() {
      
     $('#yearSlider').slider().on('slideStop', function(ev){
         drawLayer();
      });
     
     drawMap();
     
    });
    
    function drawMap() {
      
      map = new ol.Map({
        layers: [
          new ol.layer.Tile({
            source: new ol.source.OSM()
          })
        ],
        target: 'map',
        controls: ol.control.defaults({
          attributionOptions: /** @type {olx.control.AttributionOptions} */ ({
            collapsible: false
          })
        }),
        view: new ol.View({
          center: [0, 0],
          zoom: 6
        })
      });
      
      drawLayer();
      
      document.getElementById('zoom-out').onclick = function() {
        var view = map.getView();
        var zoom = view.getZoom();
        view.setZoom(zoom - 1);
      };

      document.getElementById('zoom-in').onclick = function() {
        var view = map.getView();
        var zoom = view.getZoom();
        view.setZoom(zoom + 1);
      };
      
    }
    
    function drawLayer() {
      
      map.removeLayer(vectorLayer);
      map.removeLayer(zoneLayer1);
      map.removeLayer(zoneLayer10);
      map.removeLayer(zoneLayer100);
      
      var ys = $('#yearSlider').slider('getValue');
      
      var yearRangeStart = 2000;
      var yearRangeEnd = 2016;
      
      if (ys[0] && ys[0].value) {
        var yearsRange = ys[0].value.split(',');
        yearRangeStart = yearsRange[0];
        yearRangeEnd = yearsRange[1];
      }
      
      var weaponsCB = document.getElementById("weapons").checked;
      var wildlifeCB = document.getElementById("wildlife").checked;
      var peopleCB = document.getElementById("people").checked;
      var loggingCB = document.getElementById("logging").checked;
      var elephantCB = document.getElementById("elephant").checked;
      var snaresCB = document.getElementById("snares").checked;
      var huntingCampCB = document.getElementById("huntingCamps").checked;
      
      var zone1CB = document.getElementById("zone1").checked;
      var zone2CB = document.getElementById("zone10").checked;
      var zone3CB = document.getElementById("zone100").checked;
      
      var weaponStyle = new ol.style.Style({
        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
          anchor: [0.5, 46],
          anchorXUnits: 'fraction',
          anchorYUnits: 'pixels',
          opacity: 0.75,
          src: '../images/people.png'
        }))
      });
      
      var wildlifeStyle = new ol.style.Style({
        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
          anchor: [0.5, 46],
          anchorXUnits: 'fraction',
          anchorYUnits: 'pixels',
          opacity: 0.75,
          src: '../images/wildlife.png'
        }))
      });
      
      var peopleStyle = new ol.style.Style({
        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
          anchor: [0.5, 46],
          anchorXUnits: 'fraction',
          anchorYUnits: 'pixels',
          opacity: 0.90,
          src: '../images/people2.png'
        }))
      });
      
      var loggingStyle = new ol.style.Style({
        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
          anchor: [0.5, 46],
          anchorXUnits: 'fraction',
          anchorYUnits: 'pixels',
          opacity: 0.90,
          src: '../images/logging.png'
        }))
      });
      
      var elephantStyle = new ol.style.Style({
        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
          anchor: [0.5, 46],
          anchorXUnits: 'fraction',
          anchorYUnits: 'pixels',
          opacity: 0.90,
          src: '../images/elephant.png'
        }))
      });
      
      var snaresStyle = new ol.style.Style({
        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
          anchor: [0.5, 46],
          anchorXUnits: 'fraction',
          anchorYUnits: 'pixels',
          opacity: 0.90,
          src: '../images/snares.png'
        }))
      });
      
      var huntingCampStyle = new ol.style.Style({
        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
          anchor: [0.5, 46],
          anchorXUnits: 'fraction',
          anchorYUnits: 'pixels',
          opacity: 0.90,
          src: '../images/huntingCamp.png'
        }))
      });
      

      var featuresList = [];
      
      var weapons = !{weapons};
      var wildlife = !{wildlife};
      var people = !{people};
      var logging = !{logging};
      var elephant = !{elephant};
      var snares = !{snares};
      var huntingCamps = !{huntingCamps};
      
      for (var i = 0; i < weapons.length; i++) {
        
        var patrol = weapons[i];
        
        //patrol.longitude = 11.70122006;
        //patrol.latitude = -0.313474881;
        
        var patrolIcon = new ol.Feature({
          geometry: new ol.geom.Point( ol.proj.transform([patrol.longitude, patrol.latitude], 'EPSG:4326', 'EPSG:3857') ),
          name: patrol.source,
          id: patrol.waypoint_id,
          waypoint_datetime: patrol.waypoint_datetime,
          details: patrol.details
        }); 
        
        patrolIcon.setStyle(weaponStyle);
        
        if (weaponsCB) {

          var year = new Date(patrol.waypoint_datetime).getFullYear();
          if (yearRangeStart <= year && yearRangeEnd >= year) {
            featuresList.push(patrolIcon);
          }
          
        }

      }
      
      for (var i = 0; i < snares.length; i++) {
        
        var patrol = snares[i];
        
        //patrol.longitude = 11.70122006;
        //patrol.latitude = -0.313474881;
        
        var patrolIcon = new ol.Feature({
          geometry: new ol.geom.Point( ol.proj.transform([patrol.longitude, patrol.latitude], 'EPSG:4326', 'EPSG:3857') ),
          name: patrol.source,
          id: patrol.waypoint_id,
          waypoint_datetime: patrol.waypoint_datetime,
          details: patrol.details
        }); 
        
        patrolIcon.setStyle(snaresStyle);
        
        if (snaresCB) {

          var year = new Date(patrol.waypoint_datetime).getFullYear();
          if (yearRangeStart <= year && yearRangeEnd >= year) {
            featuresList.push(patrolIcon);
          }
          
        }

      }
      
      for (var i = 0; i < huntingCamps.length; i++) {
        
        var patrol = huntingCamps[i];
        
        //patrol.longitude = 11.70122006;
        //patrol.latitude = -0.313474881;
        
        var patrolIcon = new ol.Feature({
          geometry: new ol.geom.Point( ol.proj.transform([patrol.longitude, patrol.latitude], 'EPSG:4326', 'EPSG:3857') ),
          name: patrol.source,
          id: patrol.waypoint_id,
          waypoint_datetime: patrol.waypoint_datetime,
          details: patrol.details
        }); 
        
        patrolIcon.setStyle(huntingCampStyle);
        
        if (huntingCampCB) {

          var year = new Date(patrol.waypoint_datetime).getFullYear();
          if (yearRangeStart <= year && yearRangeEnd >= year) {
            featuresList.push(patrolIcon);
          }
          
        }

      }
      
      for (var i = 0; i < elephant.length; i++) {
        
        var patrol = elephant[i];
        
        //patrol.longitude = 11.70122006;
        //patrol.latitude = -0.313474881;
        
        var patrolIcon = new ol.Feature({
          geometry: new ol.geom.Point( ol.proj.transform([patrol.longitude, patrol.latitude], 'EPSG:4326', 'EPSG:3857') ),
          name: patrol.source,
          id: patrol.waypoint_id,
          waypoint_datetime: patrol.waypoint_datetime,
          details: patrol.details
        }); 
        
        patrolIcon.setStyle(elephantStyle);
        
        if (elephantCB) {

          var year = new Date(patrol.waypoint_datetime).getFullYear();
          if (yearRangeStart <= year && yearRangeEnd >= year) {
            featuresList.push(patrolIcon);
          }
          
        }

      }
      
      for (var i = 0; i < logging.length; i++) {
        
        var patrol = logging[i];
        
        //patrol.longitude = 11.70122006;
        //patrol.latitude = -0.313474881;
        
        var patrolIcon = new ol.Feature({
          geometry: new ol.geom.Point( ol.proj.transform([patrol.longitude, patrol.latitude], 'EPSG:4326', 'EPSG:3857') ),
          name: patrol.source,
          id: patrol.waypoint_id,
          waypoint_datetime: patrol.waypoint_datetime,
          details: patrol.details
        }); 
        
        patrolIcon.setStyle(loggingStyle);
        
        if (loggingCB) {

          var year = new Date(patrol.waypoint_datetime).getFullYear();
          if (yearRangeStart <= year && yearRangeEnd >= year) {
            featuresList.push(patrolIcon);
          }
          
        }

      }
      
      for (var i = 0; i < wildlife.length; i++) {
        
        var patrol = wildlife[i];
        
        //patrol.longitude = 11.70122006;
        //patrol.latitude = -0.313474881;
        
        var patrolIcon = new ol.Feature({
          geometry: new ol.geom.Point( ol.proj.transform([patrol.longitude, patrol.latitude], 'EPSG:4326', 'EPSG:3857') ),
          name: patrol.source,
          id: patrol.waypoint_id,
          waypoint_datetime: patrol.waypoint_datetime,
          details: patrol.details
        }); 

          patrolIcon.setStyle(wildlifeStyle);
          if (wildlifeCB) {
            var year = new Date(patrol.waypoint_datetime).getFullYear();
            if (yearRangeStart <= year && yearRangeEnd >= year) {
              featuresList.push(patrolIcon);
            }
          }
      }
      
      for (var i = 0; i < people.length; i++) {
        
        var patrol = people[i];
        
        //patrol.longitude = 11.70122006;
        //patrol.latitude = -0.313474881;
        
        var patrolIcon = new ol.Feature({
          geometry: new ol.geom.Point( ol.proj.transform([patrol.longitude, patrol.latitude], 'EPSG:4326', 'EPSG:3857') ),
          name: patrol.source,
          id: patrol.waypoint_id,
          waypoint_datetime: patrol.waypoint_datetime,
          details: patrol.details
        }); 
        
        patrolIcon.setStyle(peopleStyle);
        if (peopleCB) {
          var year = new Date(patrol.waypoint_datetime).getFullYear();
          if (yearRangeStart <= year && yearRangeEnd >= year) {
            featuresList.push(patrolIcon);
          }
        }

      }
      
      var vectorSource = new ol.source.Vector({
        features: featuresList
      });

      vectorLayer = new ol.layer.Vector({
        source: vectorSource
      });

      map.addLayer(vectorLayer);
      
      if (zone1CB) {
        
        zoneLayer1 = new ol.layer.Vector({
            source: new ol.source.Vector({
                format: new ol.format.GeoJSON(),
                url: '../json/zonesheat1.geojson'
            })
        });
        
        map.addLayer(zoneLayer1);

      }
      
      if (zone2CB) {
        
        zoneLayer10 = new ol.layer.Vector({
            source: new ol.source.Vector({
                format: new ol.format.GeoJSON(),
                url: '../json/zonesheat10.geojson'
            })
        });
        
        map.addLayer(zoneLayer10);

      }
      
      if (zone3CB) {
        
        zoneLayer100 = new ol.layer.Vector({
            source: new ol.source.Vector({
                format: new ol.format.GeoJSON(),
                url: '../json/zonesheat100.geojson'
            })
        });

        map.addLayer(zoneLayer100);

      }

    }
